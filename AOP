Sommerville's Software Engineeering
Chapter #21
---------------------------------------

Aspect oriented software Engineering is different software engineering paradigm than conventional software enginerring
methodologies such as structural, object oriented, object based software engineering. Though it has its root in object
orineted software engineering it is not being used as widely as object oriented software engineering methods are used.
Aspect oriented software engineering is mainly achvied by "Aspect orineted programming". To achieve this new approach
of programming there shall be introduction of four new terminologies, for the understanding of the new semantics.

Many-to-many relationship exits between Requirements and Components in large systems.
Leads to the problem: small change in Requirements needs understanding and modifying multiple componets.
Preventing code Reuse: A component with core business logic, usually bundled with with system requirements e.g. Logging,
performance mesurement, etc..

And Aspect Oriented Software Programming(AOSP)/Engineering(AOSE) is an approach to software developement to address this
problem. Aspect oriented programming can help in writing reusable software components and develope easily maintainable softwares.

AOSP is based on an abstraction Called "Aspect" simillar to Object/Class, Method/Procedure. Aspect encapsulate the
functionalties which cross-cut(spread across multiple components) and coexists with other functionalities of the system.

An aspect can be viewed as combination of implementaion of cross-cut and definition of where these should be included in the 
programm. e.g. aspects can be included before, after a certain method call or when an attribute is accessed.

An executable of the AOSP is created by the language toolchain by inter weaving the objects, methods and aspects in
accordance with a specification which is necessarily part of the source code.
[Picture 1]Aspect is woven into the core program during an executable is produced and that can be viewed as a agumented system.

Aspect prevents accidental errors, user need not serach every place in the software code base when there is a modification 
to a requirement. Such modification information can be included into the Aspect(such as where the code is supposed to woven into)
and aspect inter weaving proces takes care of applying it correctly.

There are several attempts made to implement the AOP(Aspect Oriented Programming) paradigm into a programming language or as a 
language  extension. Out of them AspectJ is notable one which is an extension to the Java programming language and originated from 
XEROX' PARC.

As many good discoveries come with side effects, there are also trade off in AOP. The cross cutting concerns create problems at
the latter stages of the software development life cycle. There are researches going on how to utilize aspect orinetation in the 
other areas of software engineering such as system requirement engineering, system design, how to test and debug the aspect
oriented software programs.

[References]
https://en.wikipedia.org/wiki/AspectJ
